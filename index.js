const telegram = require('node-telegram-bot-api')
const deferred = require('deferred')
const axios = require('axios');
const cheerio = require('cheerio');
const iconv = require('iconv-lite');
const fs = require('fs');
const path = require('path');
const { download, navButtons, options } = require('./buttons');
require('dotenv').config();

const bot = new telegram(process.env.TOKEN, { polling: true })

const gamesPageUrl = process.env.GAMES_PAGE_URL;

let defferred = [];

const downloadFile = async (url, saveDirectory) => {
  const response = await axios.get(url, { responseType: 'stream' });
  const contentDisposition = response.headers['content-disposition'];

  try {
    const match = contentDisposition.match(/attachment; filename="([^"]+)"/);

    const fileName = match[1];
    const savePath = path.join(saveDirectory, fileName);

    const writer = fs.createWriteStream(savePath);
    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
      writer.on('finish', () => resolve(fileName));
      writer.on('error', reject);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", error);
    return
  }
}

async function GetGames() {
  const response = await axios.get(gamesPageUrl, { responseType: 'arraybuffer' });
  const html = iconv.decode(Buffer.from(response.data), 'windows-1251');
  const $ = cheerio.load(html);

  let list = [];
  $('#dle-content div a').each((i, elem) => { // –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
    let info = {};
    info['title'] = $(elem).attr('title');
    info['url'] = $(elem).attr('href');
    list.push(info);
  });

  return list;
}

async function GetGameData(url) {
  const response = await axios.get(url, { responseType: 'arraybuffer' });
  const html = iconv.decode(Buffer.from(response.data), 'windows-1251');
  const $ = cheerio.load(html);

  let game_data = [];
  let files = [];
  let aditional_files = [];

  let manual = "";

  // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
  $('.quote').each((i, elem) => {
    game_data.push($(elem).text())
  });

  $('.quote p').each((i, elem) => {
    game_data.push($(elem).text())
  });

  // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–≥—Ä—ã
  let cover = $('noindex > img').first().attr('src');

  // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã
  let system_requirements = $('.text_spoiler > img').first().attr('src');

  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
  $('a[target="_blank"]').each((_idx, el) => {
    let title = $(el).text();
    if ($(el).attr('href').includes('getfile-')) {
      let file_id = $(el).attr('href').split('getfile-')[1];
      if (files.length == 0 || title.toLowerCase().includes('fix') && files.length < 2) {
        files.push({ title, file_id });
      } else if (aditional_files.length < 6) {
        aditional_files.push({ title, file_id });
      }
    }
  });


  game_data[0] = game_data[0].split('\n');
  game_data[0] = game_data[0].filter((n) => {
    const lowerCaseString = n.toLowerCase();
    return !(lowerCaseString.includes('–æ–±–∑–æ—Ä –∏–≥—Ä—ã') || lowerCaseString.includes('—Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è')) && !(lowerCaseString == '');
  });

  return { description: game_data[0], files, cover, aditional_files, system_requirements };
}

async function sendGameDetails(user_id, gameUrl, game) {
  const answer = await GetGameData(gameUrl);
  const description = answer.description.join('\n');

  if (!answer.cover || !answer.system_requirements || !answer.files.length) {
    await bot.sendMessage(user_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É.');
    return;
  }

  async function sendPhoto(chatId, imageUrl, description) {
    await bot.sendPhoto(chatId, imageUrl, { caption: description.slice(0, 1024) });
  }

  await sendPhoto(user_id, process.env.GAMES_URL + answer.cover, description);
  await sendPhoto(user_id, answer.system_requirements.startsWith('http') ? answer.system_requirements : `https:${answer.system_requirements}`, "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è");

  for (const file of answer.files) {
    const saveDirectory = path.join('files', '' + user_id);
    if (!fs.existsSync(saveDirectory)) {
      fs.mkdirSync(saveDirectory, { recursive: true });
    }

    const fileUrl = `${process.env.GAMES_DIRECT_LINK}${file.file_id}`;
    const fileName = await downloadFile(fileUrl, saveDirectory); // –ñ–¥–µ–º, –ø–æ–∫–∞ —Ñ–∞–π–ª –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    if (fileName) {
      const filePath = path.join(saveDirectory, fileName);

      if (fs.existsSync(filePath)) {
        await bot.sendDocument(user_id, fs.createReadStream(filePath));
        fs.unlinkSync(filePath);
      } else {
        console.error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', filePath);
      }
    } else {
      await bot.sendMessage(user_id, `‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É <a href="${fileUrl}">—ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞</a> –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!`, { parse_mode: 'html' });
    }
  }

  if (answer.aditional_files.length > 0) {
    await bot.sendMessage(user_id, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    for (const file of answer.aditional_files) {
      const saveDirectory = path.join('files', '' + user_id);
      if (!fs.existsSync(saveDirectory)) {
        fs.mkdirSync(saveDirectory, { recursive: true });
      }

      const fileUrl = `${process.env.GAMES_DIRECT_LINK}${file.file_id}`;
      const fileName = await downloadFile(fileUrl, saveDirectory); // –ñ–¥–µ–º, –ø–æ–∫–∞ —Ñ–∞–π–ª –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
      if (fileName) {
        const filePath = path.join(saveDirectory, fileName);

        if (fs.existsSync(filePath)) {
          await bot.sendDocument(user_id, fs.createReadStream(filePath));
          fs.unlinkSync(filePath);
        } else {
          console.error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', filePath);
        }
      }
    }
  }
}

bot.on('message', async (msg) => {
  const foundUser = defferred.find(data => data.user_id === msg.chat.id);

  if (foundUser && foundUser.games) {
    const gameIndex = +msg.text;
    const gameToFind = foundUser.games.find(game => game.index === gameIndex);

    if (gameToFind) {
      await sendGameDetails(msg.chat.id, gameToFind.url, gameToFind);
    } else {
      await bot.sendMessage(msg.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –æ—Ç 1 –¥–æ ' + foundUser.games.length, navButtons('games'));
      return;
    }
  }

  if (foundUser) {
    foundUser.def.resolve(msg);
    defferred.splice(defferred.indexOf(foundUser), 1);
    return;
  }

  if (msg.text === '/start') {
    await bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.", options);
  } else if (msg.text === 'Discord') {
    await bot.sendMessage(msg.chat.id, "üì® https://discord.gg/M7MqQhhu5j üì®");
  } else {
    const answer = await searchGame(msg.text, msg.from.id);
    if (answer) await bot.sendMessage(msg.from.id, answer, navButtons('games'));
  }
});

async function searchGame(prompt, user_id) {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
  const GamesList = await GetGames();
  let text = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n';
  let index = 1;

  let findGames = [];
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –ø—Ä–æ–º–ø—Ç—É
  GamesList.forEach(game => {
    if (game.title.toLowerCase().includes(prompt.toLowerCase())) {
      game.index = index++;
      text += `${game.index}. ${game.title}\n`;
      findGames.push(game);
    }
  });

  if (findGames.length === 0) text = '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
  else if (findGames.length === 1) {
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–≥—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const gameToFind = findGames[0];
    await sendGameDetails(user_id, gameToFind.url, gameToFind);
    return;
  }
  if (text.length > 4000) text = '–ü–æ–ª—É—á–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.';
  else {
    const foundUser = defferred.find(data => data.user_id === user_id);
    if (foundUser) {
      foundUser.games.push(...findGames);
    } else {
      const def = new deferred();
      defferred.push({ user_id: user_id, games: findGames, def: def });
    }
  }
  return text;
}

bot.on('callback_query', async (msg) => {
  // Clean up current user's requests
  defferred = defferred.filter(data => {
    if (data.user_id === msg.from.id) {
      data.def.resolve(msg);
      return false;
    }
    return true;
  });

  // Define the question method on the msg object
  msg.question = async (text) => {
    await bot.editMessageText(text, { chat_id: msg.from.id, message_id: msg.message.message_id });
    const def = new deferred();
    defferred.push({ user_id: msg.from.id, def });
    return await def.promise(data => data.text);
  };

  if (msg.data == 'games') {
    const question = await msg.question('–ö–∞–∫—É—é –∏–≥—Ä—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?');
    const answer = await searchGame(question, msg.from.id);
    if (answer) await bot.sendMessage(msg.from.id, answer, navButtons('games'));
  }
});
